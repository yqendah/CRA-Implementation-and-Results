"""
    NVD API 2.0 Python API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: 15080890+kannkyo@users.noreply.github.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from nvd_api.low_api.api_client import ApiClient, Endpoint as _Endpoint
from nvd_api.low_api.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from nvd_api.low_api.model.cpe_match_oas import CpeMatchOas
from nvd_api.low_api.model.cpe_oas import CpeOas


class ProductsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_cpe_match_endpoint = _Endpoint(
            settings={
                'response_type': (CpeMatchOas,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/cpematch/2.0/',
                'operation_id': 'get_cpe_match',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cve_id',
                    'last_mod_start_date',
                    'last_mod_end_date',
                    'match_criteria_id',
                    'results_per_page',
                    'start_index',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'cve_id',
                    'results_per_page',
                    'start_index',
                ]
            },
            root_map={
                'validations': {
                    ('cve_id',): {

                        'regex': {
                            'pattern': r'^CVE-[0-9]{4}-[0-9]{4,}$',  # noqa: E501
                        },
                    },
                    ('results_per_page',): {

                        'inclusive_maximum': 5000,
                        'inclusive_minimum': 0,
                    },
                    ('start_index',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cve_id':
                        (str,),
                    'last_mod_start_date':
                        (datetime,),
                    'last_mod_end_date':
                        (datetime,),
                    'match_criteria_id':
                        (str,),
                    'results_per_page':
                        (int,),
                    'start_index':
                        (int,),
                },
                'attribute_map': {
                    'cve_id': 'cveId',
                    'last_mod_start_date': 'lastModStartDate',
                    'last_mod_end_date': 'lastModEndDate',
                    'match_criteria_id': 'matchCriteriaId',
                    'results_per_page': 'resultsPerPage',
                    'start_index': 'startIndex',
                },
                'location_map': {
                    'cve_id': 'query',
                    'last_mod_start_date': 'query',
                    'last_mod_end_date': 'query',
                    'match_criteria_id': 'query',
                    'results_per_page': 'query',
                    'start_index': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_cpes_endpoint = _Endpoint(
            settings={
                'response_type': (CpeOas,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/cpes/2.0/',
                'operation_id': 'get_cpes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'cpe_name_id',
                    'cpe_match_string',
                    'keyword_exact_match',
                    'keyword_search',
                    'last_mod_start_date',
                    'last_mod_end_date',
                    'match_criteria_id',
                    'results_per_page',
                    'start_index',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'results_per_page',
                    'start_index',
                ]
            },
            root_map={
                'validations': {
                    ('results_per_page',): {

                        'inclusive_maximum': 10000,
                        'inclusive_minimum': 0,
                    },
                    ('start_index',): {

                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'cpe_name_id':
                        (str,),
                    'cpe_match_string':
                        (str,),
                    'keyword_exact_match':
                        (str,),
                    'keyword_search':
                        (str,),
                    'last_mod_start_date':
                        (datetime,),
                    'last_mod_end_date':
                        (datetime,),
                    'match_criteria_id':
                        (str,),
                    'results_per_page':
                        (int,),
                    'start_index':
                        (int,),
                },
                'attribute_map': {
                    'cpe_name_id': 'cpeNameId',
                    'cpe_match_string': 'cpeMatchString',
                    'keyword_exact_match': 'keywordExactMatch',
                    'keyword_search': 'keywordSearch',
                    'last_mod_start_date': 'lastModStartDate',
                    'last_mod_end_date': 'lastModEndDate',
                    'match_criteria_id': 'matchCriteriaId',
                    'results_per_page': 'resultsPerPage',
                    'start_index': 'startIndex',
                },
                'location_map': {
                    'cpe_name_id': 'query',
                    'cpe_match_string': 'query',
                    'keyword_exact_match': 'query',
                    'keyword_search': 'query',
                    'last_mod_start_date': 'query',
                    'last_mod_end_date': 'query',
                    'match_criteria_id': 'query',
                    'results_per_page': 'query',
                    'start_index': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_cpe_match(
        self,
        **kwargs
    ):
        """Match Criteria API  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cpe_match(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            cve_id (str): CVE ID. [optional]
            last_mod_start_date (datetime): search by modified date. [optional]
            last_mod_end_date (datetime): search by modified date. [optional]
            match_criteria_id (str): specific by UUID. [optional]
            results_per_page (int): max number of records (default is 5000). [optional]
            start_index (int): the index of the first match string. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CpeMatchOas
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_cpe_match_endpoint.call_with_http_info(**kwargs)

    def get_cpes(
        self,
        **kwargs
    ):
        """CPE API  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_cpes(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            cpe_name_id (str): specific CPE record UUID. [optional]
            cpe_match_string (str): CPE Name. [optional]
            keyword_exact_match (str): if CPE exactly match or not. [optional] if omitted the server will use the default value of ""
            keyword_search (str): a word or phrase is found in the metadata title or reference links. [optional]
            last_mod_start_date (datetime): search CPE by modified date. [optional]
            last_mod_end_date (datetime): search CPE by modified date. [optional]
            match_criteria_id (str): search CPE by uuid. [optional]
            results_per_page (int): max number of CPE records (default is 10000). [optional]
            start_index (int): the index of the first match string. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CpeOas
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_cpes_endpoint.call_with_http_info(**kwargs)

